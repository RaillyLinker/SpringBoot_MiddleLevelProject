# (실행 환경 공통 설정)
# : 개발 환경에 상관 없이 공통으로 적용되는 설정

server:
  error:
    include-stacktrace: NEVER # 자세한 에러 명세는 클라이언트에게 전달하지 않기

spring:
  profiles:
    group: # 프로필 그룹 생성 - 새로운 프로필명에, 하위 프로필들을 조합. 생성한 그룹은 spring.config.activate.on-profile 에서 명시해줘야함
      local8080:
        - local
        - port8080
        - idp-jpa
        - idp-jpa-local
      dev8080:
        - dev
        - port8080
        - idp-jpa
        - idp-jpa-dev
      prod80:
        - prod
        - port80
        - idp-jpa
        - idp-jpa-prod
    default: local8080 # jar 실행시 프로필 설정이 없을 때 적용할 프로필
    # IDE 실행 프로필 설정은, 실행 - 구성편집에서 VM 옵션 안에 -Dspring.profiles.active=dev8080 이렇게 설정 가능
    # prod 실행 포트를 나눠둔 이유는 배포 서버의 무중단 배포시 스위칭을 위한 것

springdoc: # swaggerdoc 설정
  model-and-view-allowed: true # ModelAndView 허용
  use-fqn: true # Schema 정보를 package 명까지 붙여서 보여주기
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  swagger-ui:
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    doc-expansion: none
  cache:
    disabled: true

custom-config: # 프로젝트 내에서 사용하는 커스텀 설정
  # cors 허용 리스트 설정 (설정하지 않으면 모든 요청 허용)
  #  cors-allow-list: http://localhost:8081, http://127.0.0.1:8081, http://localhost:3000, http://127.0.0.1:3000

  swagger: # Swagger 문서 설정
    document-version: 1.0.0
    # !!!Swagger 문서 타이틀!!!
    document-title: Middle Level Springboot Project1 APIs
    document-description:
      |
      **[읽어주세요]**

      **(공지)**
      - 오류 제보, 요청 사항 환영 합니다.

      **(일반 규칙)**
      - 본 프로젝트가 제공하는 API 중 응답 반환값이 있는 API 의 경우, 반환값인 Response Body 는 항상 Nullable 입니다.

        해당 API 가 정상적으로 동작을 하였다면 Http Status Code 200 과 더불어 Swagger 에 게시된 해당 API 의 Response Body 의 형태와 같은 결과값을 반드시 반환할 것이지만,

        만약 데이터를 반환하기 위해 필요한 데이터가 반환 불가능한 상태(데이터베이스 조회시 원하는 데이터가 없는 상태 등)라면 Response Body 는 Null 이 될 것입니다.
      - Swagger 문서의 대분류는 컨트롤러(Controller)라고 합니다.

        컨트롤러는 일련번호가 매겨져 있고, C1, C2... 이런 식으로 표시됩니다.

        또한 컨트롤러 안의 소분류인 API 항목 역시 일련번호(Number)가 매겨져 있으며, N1, N2... 이런 식으로 표시됩니다.

        API 관련 요청을 할때는, "/service1/tk/v1/request-test/get-request" 이렇게 주소로 표현하거나 혹은, 

        "C2-N4 API", 혹은 "2-4 API" 와 같은 일련번호로 표현하여도 좋습니다.
      
        이미 API 에 할당된 일련번호는 API 가 삭제되는 경우는 있더라도, 절대 다른 API 에 할당되지 않으며,
      
        설령 API 순서를 맞추기 위하여 해당 번호가 필요한 경우에도 N2.1, N2.11 과 같이 소수점을 할당하여 엄격히 지킬 것이므로, 
      
        클라이언트는 이를 기준으로 주석 관리, 코드 관리, 문서 정리, API 논의 등에 활용하시면 좋습니다.